# (c) Copyright 2019 Xilinx, Inc. All rights reserved.
#
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
#
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
#
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
#
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.
############################################################

# Define procedure to convert text range to hex (eg 4k -> 0x0000000000001000)

proc convert_range_to_hex { range_size_bytes } {

    if {$range_size_bytes eq "4k"} {
       return "0x0000000000001000"
    } elseif {$range_size_bytes eq "8k"} {
       return "0x0000000000002000"
    } elseif {$range_size_bytes eq "16k"} {
       return "0x0000000000004000"
    } elseif {$range_size_bytes eq "32k"} {
       return "0x0000000000008000"
    } elseif {$range_size_bytes eq "64k"} {
       return "0x0000000000010000"
    } elseif {$range_size_bytes eq "128k"} {
       return "0x0000000000020000"
    } elseif {$range_size_bytes eq "256k"} {
       return "0x0000000000040000"
    } else {
       return -code error "invalid range $range_size_bytes in convert_range_to_hex procedure"
    }

}

# Define procedure to calculate base address by adding subsystem base and endpoint offset

proc get_endpoint_address { base offset } {

  set decimalbase [expr $base]
  set decimaloffset [expr $offset]
  set decimaladdress [expr {$decimalbase + $decimaloffset}]
  set hexaddress [format %4.16llX $decimaladdress]

  return "0x${hexaddress}"

}

# Define procedure to generate endpoint metadata

proc generate_addressable_endpoint_metadata { endpoint_dictionary endpoint file_name } {

    set 1tabs "    "
    set 2tabs ${1tabs}${1tabs}
    set 3tabs ${2tabs}${1tabs}
    set 4tabs ${3tabs}${1tabs}
    set 5tabs ${4tabs}${1tabs}

    if {[dict exists $endpoint_dictionary $endpoint]} {

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Create json endpoint
        #----------------------------------------------------------------------------------------------------------------------------------#

        dbg_puts_ipfile $file_name "$3tabs\"$endpoint\" : \{"

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "offset, range, pf, bar, regabs" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        dbg_puts_ipfile $file_name "$4tabs\"offset\" : \"[dict get $endpoint_dictionary $endpoint offset]\","
        dbg_puts_ipfile $file_name "$4tabs\"range\" : \"[dict get $endpoint_dictionary $endpoint range]\","
        dbg_puts_ipfile $file_name "$4tabs\"pcie_physical_function\" : \"[dict get $endpoint_dictionary $endpoint pf]\","
        dbg_puts_ipfile $file_name "$4tabs\"pcie_base_address_register\" : \"[dict get $endpoint_dictionary $endpoint bar]\","

        # Check if interrupts or firmware metadata is to be added to determine whether to add ',' after regabs metadata
        if {[dict exists $endpoint_dictionary $endpoint interrupt] || [dict exists $endpoint_dictionary $endpoint interrupt_alias] || [dict exists $endpoint_dictionary $endpoint interrupt_mapping] || [dict exists $endpoint_dictionary $endpoint firmware]} {
            dbg_puts_ipfile $file_name "$4tabs\"register_abstraction_name\" : \"[dict get $endpoint_dictionary $endpoint regabs]\","
        } else {
            dbg_puts_ipfile $file_name "$4tabs\"register_abstraction_name\" : \"[dict get $endpoint_dictionary $endpoint regabs]\""
        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "interrupts" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        # Old Schema

        if [dict exists $endpoint_dictionary $endpoint interrupt] {

            dbg_puts_ipfile $file_name "$4tabs\"msix_interrupt_start_index\" : \"[dict get $endpoint_dictionary $endpoint interrupt start]\","

            # Check if firmware metadata is to be added to determine whether to add ',' after interrupt metadata
            if {[dict exists $endpoint_dictionary $endpoint firmware]} {
                dbg_puts_ipfile $file_name "$4tabs\"msix_interrupt_end_index\" : \"[dict get $endpoint_dictionary $endpoint interrupt end]\","
            } else {
                dbg_puts_ipfile $file_name "$4tabs\"msix_interrupt_end_index\" : \"[dict get $endpoint_dictionary $endpoint interrupt end]\""
            }

        }

        # New Schema - interupt_alias

        if [dict exists $endpoint_dictionary $endpoint interrupt_alias] {

            dbg_puts_ipfile $file_name "$4tabs\"interrupt_alias\" : \["

            set interrupt_index 1

            foreach interrupt_alias [dict get $endpoint_dictionary $endpoint interrupt_alias] {

                if {$interrupt_index == [llength [dict get $endpoint_dictionary $endpoint interrupt_alias]]} {
                    dbg_puts_ipfile $file_name "$5tabs\"$interrupt_alias\""
                } else {
                    dbg_puts_ipfile $file_name "$5tabs\"$interrupt_alias\","
                }

                incr interrupt_index

            }

            # Check if firmware metadata is to be added to determine whether to add ',' after interrupt_alias metadata
            if {[dict exists $endpoint_dictionary $endpoint firmware] || [dict exists $endpoint_dictionary $endpoint interrupt_mapping] } {
                dbg_puts_ipfile $file_name "$4tabs\],"
            } else {
                dbg_puts_ipfile $file_name "$4tabs\]"
            }

        }

        # New Schema - interupt_mapping

        if [dict exists $endpoint_dictionary $endpoint interrupt_mapping] {

            dbg_puts_ipfile $file_name "$4tabs\"interrupt_mapping\" : \{"

            set int_map ""

            dict for {alias config} [dict get $endpoint_dictionary $endpoint interrupt_mapping] {
                dict with config {

                    # if interrupt is enabled, then calculate index and append the mapping
                    if {$enable} {
                        set int_index [expr $index + $offset]
                        append int_map "$5tabs\"$alias\" : \[\"$int_index\", \"$int_index\"\],\n"
                    }
                }
            }

            # trim off trailing new line and comma
            set int_map [string trimright [string trimright $int_map] ,]

            dbg_puts_ipfile $file_name $int_map

            # Check if firmware metadata is to be added to determine whether to add ',' after interupt_mapping metadata
            if {[dict exists $endpoint_dictionary $endpoint firmware]} {
                dbg_puts_ipfile $file_name "$4tabs\},"
            } else {
                dbg_puts_ipfile $file_name "$4tabs\}"
            }

        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "firmware" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        if [dict exists $endpoint_dictionary $endpoint firmware] {

            dbg_puts_ipfile $file_name "$4tabs\"firmware\": {"
            dbg_puts_ipfile $file_name "$5tabs\"firmware_product_name\" : \"[dict get $endpoint_dictionary $endpoint firmware name]\","
            dbg_puts_ipfile $file_name "$5tabs\"firmware_branch_name\" : \"[dict get $endpoint_dictionary $endpoint firmware branch]\","

            # Check if minor or revision firmware metadata is to be added to determine whether to add ',' after major metadata
            if {[dict exists $endpoint_dictionary $endpoint firmware minor] || [dict exists $endpoint_dictionary $endpoint firmware rev]} {
                dbg_puts_ipfile $file_name "$5tabs\"firmware_version_major\" : \"[dict get $endpoint_dictionary $endpoint firmware major]\","
            } else {
                dbg_puts_ipfile $file_name "$5tabs\"firmware_version_major\" : \"[dict get $endpoint_dictionary $endpoint firmware major]\""
            }

            if {[dict exists $endpoint_dictionary $endpoint firmware minor]} {

                # Check if revision firmware metadata is to be added to determine whether to add ',' after minor metadata
                if {[dict exists $endpoint_dictionary $endpoint firmware rev]} {
                    dbg_puts_ipfile $file_name "$5tabs\"firmware_version_minor\" : \"[dict get $endpoint_dictionary $endpoint firmware minor]\","
                } else {
                    dbg_puts_ipfile $file_name "$5tabs\"firmware_version_minor\" : \"[dict get $endpoint_dictionary $endpoint firmware minor]\""
                }

            }

            if {[dict exists $endpoint_dictionary $endpoint firmware rev]} {
                dbg_puts_ipfile $file_name "$5tabs\"firmware_version_revision\" : \"[dict get $endpoint_dictionary $endpoint firmware rev]\""
            }

            dbg_puts_ipfile $file_name "$4tabs}"

        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # End json endpoint metadata definition
        #----------------------------------------------------------------------------------------------------------------------------------#

        if {[dict exists $endpoint_dictionary $endpoint is_last]} {
            dbg_puts_ipfile $file_name "$3tabs\}"
        } else {
            dbg_puts_ipfile $file_name "$3tabs\},"
        }

    }

}

# Define procedure to generate partition metadata json fragment

proc generate_partition_metadata_json_fragment { endpoint_list endpoint_dictionary } {

    set 1tabs "    "
    set 2tabs ${1tabs}${1tabs}
    set 3tabs ${2tabs}${1tabs}
    set 4tabs ${3tabs}${1tabs}
    set 5tabs ${4tabs}${1tabs}

    # Write json metadata fragments for each endpoint

    # Open fragment file
    set file_name "partition_metadata.fragment.json"
    add_ipfile -fileType elaboratedData $file_name

    # Start json
    dbg_puts_ipfile $file_name "\{"

    # Generate schema_version
    dbg_puts_ipfile $file_name "$1tabs\"partition_metadata\" : \{"
    dbg_puts_ipfile $file_name "$2tabs\"schema_version\" : \{"
    dbg_puts_ipfile $file_name "$3tabs\"major\" : \"0x1\","
    dbg_puts_ipfile $file_name "$3tabs\"minor\" : \"0x0\""
    dbg_puts_ipfile $file_name "$2tabs\},"

    # Generate addressable_endpoints
    dbg_puts_ipfile $file_name "$2tabs\"addressable_endpoints\" : \{"

    # Generate metadata for each endpoint in $endpoint_list
    foreach endpoint $endpoint_list {
        generate_addressable_endpoint_metadata $endpoint_dictionary $endpoint $file_name
    }

    # End addressable_endpoints
    dbg_puts_ipfile $file_name "$2tabs\}"

    # End partition_metadata
    dbg_puts_ipfile $file_name "$1tabs\}"

    # End json
    dbg_puts_ipfile $file_name "\}"

    # close fragment file
    close_ipfile $file_name

}
