<: ;# (c) Copyright 2019 Xilinx, Inc. All rights reserved.:>
<: ;#:>
<: ;# This file contains confidential and proprietary information:>
<: ;# of Xilinx, Inc. and is protected under U.S. and:>
<: ;# international copyright and other intellectual property:>
<: ;# laws.:>
<: ;#:>
<: ;# DISCLAIMER:>
<: ;# This disclaimer is not a license and does not grant any:>
<: ;# rights to the materials distributed herewith. Except as:>
<: ;# otherwise provided in a valid license issued to you by:>
<: ;# Xilinx, and to the maximum extent permitted by applicable:>
<: ;# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND:>
<: ;# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES:>
<: ;# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING:>
<: ;# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-:>
<: ;# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and:>
<: ;# (2) Xilinx shall not be liable (whether in contract or tort,:>
<: ;# including negligence, or under any other theory of:>
<: ;# liability) for any loss or damage of any kind or nature:>
<: ;# related to, arising under or in connection with these:>
<: ;# materials, including for any direct, or any indirect,:>
<: ;# special, incidental, or consequential loss or damage:>
<: ;# (including loss of data, profits, goodwill, or any type of:>
<: ;# loss or damage suffered as a result of any action brought:>
<: ;# by a third party) even if such damage or loss was:>
<: ;# reasonably foreseeable or Xilinx had been advised of the:>
<: ;# possibility of the same.:>
<: ;#:>
<: ;# CRITICAL APPLICATIONS:>
<: ;# Xilinx products are not designed or intended to be fail-:>
<: ;# safe, or for use in any application requiring fail-safe:>
<: ;# performance, such as life-support or safety devices or:>
<: ;# systems, Class III medical devices, nuclear facilities,:>
<: ;# applications related to the deployment of airbags, or any:>
<: ;# other applications that could lead to death, personal:>
<: ;# injury, or severe property or environmental damage:>
<: ;# (individually and collectively, "Critical:>
<: ;# Applications"). Customer assumes the sole risk and:>
<: ;# liability of any use of Xilinx products in Critical:>
<: ;# Applications, subject only to applicable laws and:>
<: ;# regulations governing limitations on product liability.:>
<: ;#:>
<: ;# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS:>
<: ;# PART OF THIS FILE AT ALL TIMES.:>
<: ;############################################################:>
<#: ttcl/utils/common.ttcl :>
<: setFileName [ttcl_string_concat $CompName "_ooc"] :>
<: setFileExtension ".xdc" :>
<: setOutputDirectory "synth" :>
<: setFileUsedIn {out_of_context synthesis implementation} :>
<: set comment "##" :>
<#: ttcl/utils/disclaimer.ttcl :>
<: set partition_name [get_parameter_property "PARTITION_NAME"] :>
<: set has_axi_hwicap [get_parameter_property "HAS_AXI_HWICAP"] :>
<: set has_jtag_axi_master [get_parameter_property "HAS_JTAG_AXI_MASTER"] :>
<: set has_uuid_rom [get_parameter_property "HAS_UUID_ROM"] :>
<: set has_user_debug [get_parameter_property "HAS_USER_DEBUG"] :>
<: set has_memory_calib_status [get_parameter_property "HAS_MEMORY_CALIB_STATUS"] :>
<: set has_mgmt_debug [get_parameter_property "HAS_MGMT_DEBUG"] :>
<: set has_ddr4_reset_gate [get_parameter_property "HAS_DDR4_RESET_GATE"] :>
<: set regslice_uuid_rom [get_parameter_property "REGSLICE_UUID_ROM"] :>
<: set regslice_user_debug_bridge [get_parameter_property "REGSLICE_USER_DEBUG_BRIDGE"] :>
<: set regslice_memory_calib_status [get_parameter_property "REGSLICE_MEMORY_CALIB_STATUS"] :>
<: set regslice_mgmt_debug [get_parameter_property "REGSLICE_MGMT_DEBUG"] :>
<: set regslice_ddr4_reset_gate [get_parameter_property "REGSLICE_DDR4_RESET_GATE"] :>
<: set bufgctrls {X0Y0 X0Y1 X0Y2 X0Y3} :>
<: if {[getProjectDevice] == {xcu30}} { set bufgctrls {X1Y0 X1Y1 X1Y2 X1Y3} }:>

<: if {$partition_name == "BLP" && $has_axi_hwicap} { :>
create_clock -period 10.000 [get_ports clk_icap]
set_property HD.CLK_SRC BUFGCTRL_<=: lindex $bufgctrls 0 :> [get_ports clk_icap]
set Period_clk_icap    [get_property PERIOD [get_clocks -of_objects [get_ports clk_icap]]]
<: } :>

<: if {(($has_axi_hwicap) || ($has_jtag_axi_master)) && ($partition_name != "ULP")} { :>
create_clock -period 4.000 [get_ports aclk_pcie]
set_property HD.CLK_SRC BUFGCTRL_<=: lindex $bufgctrls 1 :> [get_ports aclk_pcie]
set Period_aclk_pcie   [get_property PERIOD [get_clocks -of_objects [get_ports aclk_pcie]]]
<: } :>

create_clock -period 20.000 [get_ports aclk_ctrl]
set_property HD.CLK_SRC BUFGCTRL_<=: lindex $bufgctrls 2 :> [get_ports aclk_ctrl]
set Period_aclk_ctrl   [get_property PERIOD [get_clocks -of_objects [get_ports aclk_ctrl]]]

<: if {($has_uuid_rom && $regslice_uuid_rom == "TDM") || ($has_user_debug && $regslice_user_debug_bridge == "TDM") || ($has_memory_calib_status && $regslice_memory_calib_status == "TDM") || ($has_mgmt_debug && $regslice_mgmt_debug == "TDM") || ($has_ddr4_reset_gate && $regslice_ddr4_reset_gate == "TDM")} { :>
create_generated_clock -multiply_by 2 -source [get_ports aclk_ctrl] [get_ports aclk_ctrl_2x]
set_property HD.CLK_SRC BUFGCTRL_<=: lindex $bufgctrls 3 :> [get_ports aclk_ctrl_2x]
<: } :>

<: if {$partition_name == "BLP" && $has_axi_hwicap} { :>
set_max_delay -datapath_only -from [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_pcie]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  -to [filter [all_registers -clock [get_clocks -of_objects [get_ports clk_icap]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  $Period_aclk_pcie
set_max_delay -datapath_only -from [filter [all_registers -clock [get_clocks -of_objects [get_ports clk_icap]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  -to [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_pcie]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  $Period_clk_icap
set_max_delay -datapath_only -from [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_ctrl]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  -to [filter [all_registers -clock [get_clocks -of_objects [get_ports clk_icap]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  $Period_aclk_ctrl
set_max_delay -datapath_only -from [filter [all_registers -clock [get_clocks -of_objects [get_ports clk_icap]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  -to [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_ctrl]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  $Period_clk_icap
set_max_delay -datapath_only -from [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_pcie]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  -to [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_ctrl]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  $Period_aclk_pcie
set_max_delay -datapath_only -from [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_ctrl]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  -to [filter [all_registers -clock [get_clocks -of_objects [get_ports aclk_pcie]]] {PRIMITIVE_TYPE !~ "BMEM*" && PRIMITIVE_TYPE !~ "BLOCKRAM*"}]  $Period_aclk_ctrl
<: } :>
