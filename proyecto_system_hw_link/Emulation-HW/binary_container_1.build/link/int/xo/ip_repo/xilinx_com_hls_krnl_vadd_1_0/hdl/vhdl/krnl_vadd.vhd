-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_vadd is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of krnl_vadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_vadd_krnl_vadd,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=1000078,HLS_SYN_TPT=1000076,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1743,HLS_SYN_LUT=3047,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal in1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_out_r_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_out_r_c_write : STD_LOGIC;
    signal entry_proc_U0_ap_ext_blocking_n : STD_LOGIC;
    signal entry_proc_U0_ap_str_blocking_n : STD_LOGIC;
    signal entry_proc_U0_ap_int_blocking_n : STD_LOGIC;
    signal load_input_U0_ap_start : STD_LOGIC;
    signal load_input_U0_ap_done : STD_LOGIC;
    signal load_input_U0_ap_continue : STD_LOGIC;
    signal load_input_U0_ap_idle : STD_LOGIC;
    signal load_input_U0_ap_ready : STD_LOGIC;
    signal load_input_U0_start_out : STD_LOGIC;
    signal load_input_U0_start_write : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_input_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_input_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal load_input_U0_size_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_size_c_write : STD_LOGIC;
    signal load_input_U0_in1_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_in1_stream_write : STD_LOGIC;
    signal load_input_U0_ap_ext_blocking_n : STD_LOGIC;
    signal load_input_U0_ap_str_blocking_n : STD_LOGIC;
    signal load_input_U0_ap_int_blocking_n : STD_LOGIC;
    signal compute_add_U0_ap_start : STD_LOGIC;
    signal compute_add_U0_ap_done : STD_LOGIC;
    signal compute_add_U0_ap_continue : STD_LOGIC;
    signal compute_add_U0_ap_idle : STD_LOGIC;
    signal compute_add_U0_ap_ready : STD_LOGIC;
    signal compute_add_U0_size_read : STD_LOGIC;
    signal compute_add_U0_in1_stream_read : STD_LOGIC;
    signal compute_add_U0_out_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_add_U0_out_stream_write : STD_LOGIC;
    signal compute_add_U0_ap_ext_blocking_n : STD_LOGIC;
    signal compute_add_U0_ap_str_blocking_n : STD_LOGIC;
    signal compute_add_U0_ap_int_blocking_n : STD_LOGIC;
    signal store_result_U0_ap_start : STD_LOGIC;
    signal store_result_U0_ap_done : STD_LOGIC;
    signal store_result_U0_ap_continue : STD_LOGIC;
    signal store_result_U0_ap_idle : STD_LOGIC;
    signal store_result_U0_ap_ready : STD_LOGIC;
    signal store_result_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal store_result_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_result_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal store_result_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal store_result_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal store_result_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_result_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal store_result_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal store_result_U0_out_r_read : STD_LOGIC;
    signal store_result_U0_out_stream_read : STD_LOGIC;
    signal store_result_U0_ap_ext_blocking_n : STD_LOGIC;
    signal store_result_U0_ap_str_blocking_n : STD_LOGIC;
    signal store_result_U0_ap_int_blocking_n : STD_LOGIC;
    signal out_r_c_full_n : STD_LOGIC;
    signal out_r_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal out_r_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal out_r_c_empty_n : STD_LOGIC;
    signal size_c_full_n : STD_LOGIC;
    signal size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal size_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal size_c_empty_n : STD_LOGIC;
    signal in1_stream_full_n : STD_LOGIC;
    signal in1_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_stream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal in1_stream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal in1_stream_empty_n : STD_LOGIC;
    signal out_stream_full_n : STD_LOGIC;
    signal out_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal out_stream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal out_stream_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_input_U0_ap_ready : STD_LOGIC;
    signal start_for_store_result_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_result_U0_full_n : STD_LOGIC;
    signal start_for_store_result_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_result_U0_empty_n : STD_LOGIC;
    signal start_for_compute_add_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_add_U0_full_n : STD_LOGIC;
    signal start_for_compute_add_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_add_U0_empty_n : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_vadd_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_c_full_n : IN STD_LOGIC;
        out_r_c_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_vadd_load_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        size_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        size_c_full_n : IN STD_LOGIC;
        size_c_write : OUT STD_LOGIC;
        in1_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_full_n : IN STD_LOGIC;
        in1_stream_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_vadd_compute_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        size_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        size_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        size_empty_n : IN STD_LOGIC;
        size_read : OUT STD_LOGIC;
        in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_empty_n : IN STD_LOGIC;
        in1_stream_read : OUT STD_LOGIC;
        out_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out_stream_full_n : IN STD_LOGIC;
        out_stream_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_vadd_store_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_empty_n : IN STD_LOGIC;
        out_r_read : OUT STD_LOGIC;
        out_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        out_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out_stream_empty_n : IN STD_LOGIC;
        out_stream_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_vadd_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_vadd_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_vadd_start_for_store_result_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_vadd_start_for_compute_add_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_vadd_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component krnl_vadd_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component krnl_vadd_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in1 => in1,
        out_r => out_r,
        size => size,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component krnl_vadd_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load_input_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => load_input_U0_m_axi_gmem0_ARADDR,
        I_ARLEN => load_input_U0_m_axi_gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => load_input_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => store_result_U0_m_axi_gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => store_result_U0_m_axi_gmem0_AWADDR,
        I_AWLEN => store_result_U0_m_axi_gmem0_AWLEN,
        I_WVALID => store_result_U0_m_axi_gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => store_result_U0_m_axi_gmem0_WDATA,
        I_WSTRB => store_result_U0_m_axi_gmem0_WSTRB,
        I_BVALID => gmem0_BVALID,
        I_BREADY => store_result_U0_m_axi_gmem0_BREADY);

    entry_proc_U0 : component krnl_vadd_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_store_result_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        out_r => out_r,
        out_r_c_din => entry_proc_U0_out_r_c_din,
        out_r_c_num_data_valid => out_r_c_num_data_valid,
        out_r_c_fifo_cap => out_r_c_fifo_cap,
        out_r_c_full_n => out_r_c_full_n,
        out_r_c_write => entry_proc_U0_out_r_c_write,
        ap_ext_blocking_n => entry_proc_U0_ap_ext_blocking_n,
        ap_str_blocking_n => entry_proc_U0_ap_str_blocking_n,
        ap_int_blocking_n => entry_proc_U0_ap_int_blocking_n);

    load_input_U0 : component krnl_vadd_load_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_input_U0_ap_start,
        start_full_n => start_for_compute_add_U0_full_n,
        ap_done => load_input_U0_ap_done,
        ap_continue => load_input_U0_ap_continue,
        ap_idle => load_input_U0_ap_idle,
        ap_ready => load_input_U0_ap_ready,
        start_out => load_input_U0_start_out,
        start_write => load_input_U0_start_write,
        m_axi_gmem0_AWVALID => load_input_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => load_input_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => load_input_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => load_input_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => load_input_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => load_input_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => load_input_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => load_input_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => load_input_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => load_input_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => load_input_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => load_input_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => load_input_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => load_input_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => load_input_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => load_input_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => load_input_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => load_input_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => load_input_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => load_input_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => load_input_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => load_input_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => load_input_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => load_input_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => load_input_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => load_input_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => load_input_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => load_input_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => load_input_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => load_input_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => load_input_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => load_input_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        in_r => in1,
        size => size,
        size_c_din => load_input_U0_size_c_din,
        size_c_num_data_valid => size_c_num_data_valid,
        size_c_fifo_cap => size_c_fifo_cap,
        size_c_full_n => size_c_full_n,
        size_c_write => load_input_U0_size_c_write,
        in1_stream_din => load_input_U0_in1_stream_din,
        in1_stream_num_data_valid => in1_stream_num_data_valid,
        in1_stream_fifo_cap => in1_stream_fifo_cap,
        in1_stream_full_n => in1_stream_full_n,
        in1_stream_write => load_input_U0_in1_stream_write,
        ap_ext_blocking_n => load_input_U0_ap_ext_blocking_n,
        ap_str_blocking_n => load_input_U0_ap_str_blocking_n,
        ap_int_blocking_n => load_input_U0_ap_int_blocking_n);

    compute_add_U0 : component krnl_vadd_compute_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_add_U0_ap_start,
        ap_done => compute_add_U0_ap_done,
        ap_continue => compute_add_U0_ap_continue,
        ap_idle => compute_add_U0_ap_idle,
        ap_ready => compute_add_U0_ap_ready,
        size_dout => size_c_dout,
        size_num_data_valid => size_c_num_data_valid,
        size_fifo_cap => size_c_fifo_cap,
        size_empty_n => size_c_empty_n,
        size_read => compute_add_U0_size_read,
        in1_stream_dout => in1_stream_dout,
        in1_stream_num_data_valid => in1_stream_num_data_valid,
        in1_stream_fifo_cap => in1_stream_fifo_cap,
        in1_stream_empty_n => in1_stream_empty_n,
        in1_stream_read => compute_add_U0_in1_stream_read,
        out_stream_din => compute_add_U0_out_stream_din,
        out_stream_num_data_valid => out_stream_num_data_valid,
        out_stream_fifo_cap => out_stream_fifo_cap,
        out_stream_full_n => out_stream_full_n,
        out_stream_write => compute_add_U0_out_stream_write,
        ap_ext_blocking_n => compute_add_U0_ap_ext_blocking_n,
        ap_str_blocking_n => compute_add_U0_ap_str_blocking_n,
        ap_int_blocking_n => compute_add_U0_ap_int_blocking_n);

    store_result_U0 : component krnl_vadd_store_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_result_U0_ap_start,
        ap_done => store_result_U0_ap_done,
        ap_continue => store_result_U0_ap_continue,
        ap_idle => store_result_U0_ap_idle,
        ap_ready => store_result_U0_ap_ready,
        m_axi_gmem0_AWVALID => store_result_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => gmem0_AWREADY,
        m_axi_gmem0_AWADDR => store_result_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => store_result_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => store_result_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => store_result_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => store_result_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => store_result_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => store_result_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => store_result_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => store_result_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => store_result_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => store_result_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => store_result_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => gmem0_WREADY,
        m_axi_gmem0_WDATA => store_result_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => store_result_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => store_result_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => store_result_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => store_result_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => store_result_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => ap_const_logic_0,
        m_axi_gmem0_ARADDR => store_result_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => store_result_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => store_result_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => store_result_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => store_result_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => store_result_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => store_result_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => store_result_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => store_result_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => store_result_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => store_result_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => ap_const_logic_0,
        m_axi_gmem0_RREADY => store_result_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => ap_const_lv32_0,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => gmem0_BVALID,
        m_axi_gmem0_BREADY => store_result_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => gmem0_BRESP,
        m_axi_gmem0_BID => gmem0_BID,
        m_axi_gmem0_BUSER => gmem0_BUSER,
        out_r_dout => out_r_c_dout,
        out_r_num_data_valid => out_r_c_num_data_valid,
        out_r_fifo_cap => out_r_c_fifo_cap,
        out_r_empty_n => out_r_c_empty_n,
        out_r_read => store_result_U0_out_r_read,
        out_stream_dout => out_stream_dout,
        out_stream_num_data_valid => out_stream_num_data_valid,
        out_stream_fifo_cap => out_stream_fifo_cap,
        out_stream_empty_n => out_stream_empty_n,
        out_stream_read => store_result_U0_out_stream_read,
        ap_ext_blocking_n => store_result_U0_ap_ext_blocking_n,
        ap_str_blocking_n => store_result_U0_ap_str_blocking_n,
        ap_int_blocking_n => store_result_U0_ap_int_blocking_n);

    out_r_c_U : component krnl_vadd_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_out_r_c_din,
        if_full_n => out_r_c_full_n,
        if_write => entry_proc_U0_out_r_c_write,
        if_dout => out_r_c_dout,
        if_num_data_valid => out_r_c_num_data_valid,
        if_fifo_cap => out_r_c_fifo_cap,
        if_empty_n => out_r_c_empty_n,
        if_read => store_result_U0_out_r_read);

    size_c_U : component krnl_vadd_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input_U0_size_c_din,
        if_full_n => size_c_full_n,
        if_write => load_input_U0_size_c_write,
        if_dout => size_c_dout,
        if_num_data_valid => size_c_num_data_valid,
        if_fifo_cap => size_c_fifo_cap,
        if_empty_n => size_c_empty_n,
        if_read => compute_add_U0_size_read);

    in1_stream_U : component krnl_vadd_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input_U0_in1_stream_din,
        if_full_n => in1_stream_full_n,
        if_write => load_input_U0_in1_stream_write,
        if_dout => in1_stream_dout,
        if_num_data_valid => in1_stream_num_data_valid,
        if_fifo_cap => in1_stream_fifo_cap,
        if_empty_n => in1_stream_empty_n,
        if_read => compute_add_U0_in1_stream_read);

    out_stream_U : component krnl_vadd_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_add_U0_out_stream_din,
        if_full_n => out_stream_full_n,
        if_write => compute_add_U0_out_stream_write,
        if_dout => out_stream_dout,
        if_num_data_valid => out_stream_num_data_valid,
        if_fifo_cap => out_stream_fifo_cap,
        if_empty_n => out_stream_empty_n,
        if_read => store_result_U0_out_stream_read);

    start_for_store_result_U0_U : component krnl_vadd_start_for_store_result_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_result_U0_din,
        if_full_n => start_for_store_result_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_store_result_U0_dout,
        if_empty_n => start_for_store_result_U0_empty_n,
        if_read => store_result_U0_ap_ready);

    start_for_compute_add_U0_U : component krnl_vadd_start_for_compute_add_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_add_U0_din,
        if_full_n => start_for_compute_add_U0_full_n,
        if_write => load_input_U0_start_write,
        if_dout => start_for_compute_add_U0_dout,
        if_empty_n => start_for_compute_add_U0_empty_n,
        if_read => compute_add_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_sync_load_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;
    ap_done <= store_result_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (store_result_U0_ap_ext_blocking_n and load_input_U0_ap_ext_blocking_n and entry_proc_U0_ap_ext_blocking_n and compute_add_U0_ap_ext_blocking_n);
    ap_idle <= (store_result_U0_ap_idle and load_input_U0_ap_idle and entry_proc_U0_ap_idle and compute_add_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (store_result_U0_ap_int_blocking_n and load_input_U0_ap_int_blocking_n and entry_proc_U0_ap_int_blocking_n and compute_add_U0_ap_int_blocking_n);
    ap_ready <= ap_sync_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (store_result_U0_ap_str_blocking_n and load_input_U0_ap_str_blocking_n and entry_proc_U0_ap_str_blocking_n and compute_add_U0_ap_str_blocking_n);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_load_input_U0_ap_ready <= (load_input_U0_ap_ready or ap_sync_reg_load_input_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_input_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    compute_add_U0_ap_continue <= ap_const_logic_1;
    compute_add_U0_ap_start <= start_for_compute_add_U0_empty_n;
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    event_done <= ap_done;
    gmem0_BID <= ap_const_lv1_0;
    gmem0_BRESP <= ap_const_lv2_0;
    gmem0_BUSER <= ap_const_lv1_0;
    gmem0_RID <= ap_const_lv1_0;
    gmem0_RLAST <= ap_const_logic_0;
    gmem0_RRESP <= ap_const_lv2_0;
    gmem0_RUSER <= ap_const_lv1_0;
    load_input_U0_ap_continue <= ap_const_logic_1;
    load_input_U0_ap_start <= ((ap_sync_reg_load_input_U0_ap_ready xor ap_const_logic_1) and ap_start);

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    start_for_compute_add_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_result_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_result_U0_ap_continue <= ap_continue;
    store_result_U0_ap_start <= start_for_store_result_U0_empty_n;
end behav;
