-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity probatina_probatina_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_m00_axi_AWVALID : OUT STD_LOGIC;
    m_axi_m00_axi_AWREADY : IN STD_LOGIC;
    m_axi_m00_axi_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_m00_axi_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m00_axi_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_WVALID : OUT STD_LOGIC;
    m_axi_m00_axi_WREADY : IN STD_LOGIC;
    m_axi_m00_axi_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_m00_axi_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_m00_axi_WLAST : OUT STD_LOGIC;
    m_axi_m00_axi_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_ARVALID : OUT STD_LOGIC;
    m_axi_m00_axi_ARREADY : IN STD_LOGIC;
    m_axi_m00_axi_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_m00_axi_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m00_axi_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m00_axi_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m00_axi_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_RVALID : IN STD_LOGIC;
    m_axi_m00_axi_RREADY : OUT STD_LOGIC;
    m_axi_m00_axi_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_m00_axi_RLAST : IN STD_LOGIC;
    m_axi_m00_axi_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_m00_axi_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_BVALID : IN STD_LOGIC;
    m_axi_m00_axi_BREADY : OUT STD_LOGIC;
    m_axi_m00_axi_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m00_axi_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m00_axi_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln47 : IN STD_LOGIC_VECTOR (57 downto 0);
    m00_axi_input_buffer_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m00_axi_input_buffer_ce0 : OUT STD_LOGIC;
    m00_axi_input_buffer_we0 : OUT STD_LOGIC;
    m00_axi_input_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of probatina_probatina_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv480_lc_1 : STD_LOGIC_VECTOR (479 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal exitcond65_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op25_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond65_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal m00_axi_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index3_load_reg_200 : STD_LOGIC_VECTOR (12 downto 0);
    signal loop_index3_load_reg_200_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond65_reg_205_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_reg_209_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal m00_axi_addr_read_reg_213 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_phi_mux_empty_25_phi_fu_93_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_25_reg_90 : STD_LOGIC_VECTOR (511 downto 0);
    signal shiftreg9_cast_fu_152_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal loop_index3_cast2_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shiftreg9_fu_58 : STD_LOGIC_VECTOR (479 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal loop_index3_fu_62 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_24_fu_122_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_loop_index3_load : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_27_fu_128_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component probatina_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component probatina_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    loop_index3_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond65_fu_116_p2 = ap_const_lv1_0))) then 
                    loop_index3_fu_62 <= empty_24_fu_122_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index3_fu_62 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    shiftreg9_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    shiftreg9_fu_58 <= ap_const_lv480_lc_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    shiftreg9_fu_58 <= ap_phi_mux_empty_25_phi_fu_93_p4(511 downto 32);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                empty_28_reg_209_pp0_iter1_reg <= empty_28_reg_209;
                exitcond65_reg_205 <= exitcond65_fu_116_p2;
                exitcond65_reg_205_pp0_iter1_reg <= exitcond65_reg_205;
                loop_index3_load_reg_200 <= ap_sig_allocacmp_loop_index3_load;
                loop_index3_load_reg_200_pp0_iter1_reg <= loop_index3_load_reg_200;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond65_fu_116_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_28_reg_209 <= empty_28_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op25_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                m00_axi_addr_read_reg_213 <= m_axi_m00_axi_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m00_axi_RVALID, ap_predicate_op25_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op25_read_state2 = ap_const_boolean_1) and (m_axi_m00_axi_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m00_axi_RVALID, ap_predicate_op25_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op25_read_state2 = ap_const_boolean_1) and (m_axi_m00_axi_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_m00_axi_RVALID, ap_predicate_op25_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op25_read_state2 = ap_const_boolean_1) and (m_axi_m00_axi_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond65_fu_116_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond65_fu_116_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond65_reg_205, ap_block_pp0_stage0_subdone)
    begin
        if (((exitcond65_reg_205 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_25_phi_fu_93_p4_assign_proc : process(exitcond65_reg_205_pp0_iter1_reg, empty_28_reg_209_pp0_iter1_reg, m00_axi_addr_read_reg_213, ap_phi_reg_pp0_iter2_empty_25_reg_90, shiftreg9_cast_fu_152_p1)
    begin
        if ((exitcond65_reg_205_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((empty_28_reg_209_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_25_phi_fu_93_p4 <= shiftreg9_cast_fu_152_p1;
            elsif ((empty_28_reg_209_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_25_phi_fu_93_p4 <= m00_axi_addr_read_reg_213;
            else 
                ap_phi_mux_empty_25_phi_fu_93_p4 <= ap_phi_reg_pp0_iter2_empty_25_reg_90;
            end if;
        else 
            ap_phi_mux_empty_25_phi_fu_93_p4 <= ap_phi_reg_pp0_iter2_empty_25_reg_90;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_25_reg_90 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op25_read_state2_assign_proc : process(exitcond65_reg_205, empty_28_reg_209)
    begin
                ap_predicate_op25_read_state2 <= ((empty_28_reg_209 = ap_const_lv1_1) and (exitcond65_reg_205 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_loop_index3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, loop_index3_fu_62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_loop_index3_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_loop_index3_load <= loop_index3_fu_62;
        end if; 
    end process;

    empty_24_fu_122_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_loop_index3_load) + unsigned(ap_const_lv13_1));
    empty_27_fu_128_p1 <= ap_sig_allocacmp_loop_index3_load(4 - 1 downto 0);
    empty_28_fu_132_p2 <= "1" when (empty_27_fu_128_p1 = ap_const_lv4_0) else "0";
    exitcond65_fu_116_p2 <= "1" when (ap_sig_allocacmp_loop_index3_load = ap_const_lv13_1000) else "0";
    loop_index3_cast2_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index3_load_reg_200_pp0_iter1_reg),64));

    m00_axi_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_m00_axi_RVALID, ap_predicate_op25_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op25_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m00_axi_blk_n_R <= m_axi_m00_axi_RVALID;
        else 
            m00_axi_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m00_axi_input_buffer_address0 <= loop_index3_cast2_fu_157_p1(13 - 1 downto 0);

    m00_axi_input_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m00_axi_input_buffer_ce0 <= ap_const_logic_1;
        else 
            m00_axi_input_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m00_axi_input_buffer_d0 <= ap_phi_mux_empty_25_phi_fu_93_p4(32 - 1 downto 0);

    m00_axi_input_buffer_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m00_axi_input_buffer_we0 <= ap_const_logic_1;
        else 
            m00_axi_input_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_m00_axi_ARADDR <= ap_const_lv64_0;
    m_axi_m00_axi_ARBURST <= ap_const_lv2_0;
    m_axi_m00_axi_ARCACHE <= ap_const_lv4_0;
    m_axi_m00_axi_ARID <= ap_const_lv1_0;
    m_axi_m00_axi_ARLEN <= ap_const_lv32_0;
    m_axi_m00_axi_ARLOCK <= ap_const_lv2_0;
    m_axi_m00_axi_ARPROT <= ap_const_lv3_0;
    m_axi_m00_axi_ARQOS <= ap_const_lv4_0;
    m_axi_m00_axi_ARREGION <= ap_const_lv4_0;
    m_axi_m00_axi_ARSIZE <= ap_const_lv3_0;
    m_axi_m00_axi_ARUSER <= ap_const_lv1_0;
    m_axi_m00_axi_ARVALID <= ap_const_logic_0;
    m_axi_m00_axi_AWADDR <= ap_const_lv64_0;
    m_axi_m00_axi_AWBURST <= ap_const_lv2_0;
    m_axi_m00_axi_AWCACHE <= ap_const_lv4_0;
    m_axi_m00_axi_AWID <= ap_const_lv1_0;
    m_axi_m00_axi_AWLEN <= ap_const_lv32_0;
    m_axi_m00_axi_AWLOCK <= ap_const_lv2_0;
    m_axi_m00_axi_AWPROT <= ap_const_lv3_0;
    m_axi_m00_axi_AWQOS <= ap_const_lv4_0;
    m_axi_m00_axi_AWREGION <= ap_const_lv4_0;
    m_axi_m00_axi_AWSIZE <= ap_const_lv3_0;
    m_axi_m00_axi_AWUSER <= ap_const_lv1_0;
    m_axi_m00_axi_AWVALID <= ap_const_logic_0;
    m_axi_m00_axi_BREADY <= ap_const_logic_0;

    m_axi_m00_axi_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op25_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op25_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_m00_axi_RREADY <= ap_const_logic_1;
        else 
            m_axi_m00_axi_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_m00_axi_WDATA <= ap_const_lv512_lc_1;
    m_axi_m00_axi_WID <= ap_const_lv1_0;
    m_axi_m00_axi_WLAST <= ap_const_logic_0;
    m_axi_m00_axi_WSTRB <= ap_const_lv64_0;
    m_axi_m00_axi_WUSER <= ap_const_lv1_0;
    m_axi_m00_axi_WVALID <= ap_const_logic_0;
    shiftreg9_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftreg9_fu_58),512));
end behav;
