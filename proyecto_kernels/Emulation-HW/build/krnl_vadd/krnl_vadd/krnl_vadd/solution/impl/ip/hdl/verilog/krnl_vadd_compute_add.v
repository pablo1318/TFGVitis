// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_vadd_compute_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        size_dout,
        size_num_data_valid,
        size_fifo_cap,
        size_empty_n,
        size_read,
        in1_stream_dout,
        in1_stream_num_data_valid,
        in1_stream_fifo_cap,
        in1_stream_empty_n,
        in1_stream_read,
        out_stream_din,
        out_stream_num_data_valid,
        out_stream_fifo_cap,
        out_stream_full_n,
        out_stream_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] size_dout;
input  [1:0] size_num_data_valid;
input  [1:0] size_fifo_cap;
input   size_empty_n;
output   size_read;
input  [31:0] in1_stream_dout;
input  [1:0] in1_stream_num_data_valid;
input  [1:0] in1_stream_fifo_cap;
input   in1_stream_empty_n;
output   in1_stream_read;
output  [31:0] out_stream_din;
input  [1:0] out_stream_num_data_valid;
input  [1:0] out_stream_fifo_cap;
input   out_stream_full_n;
output   out_stream_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg size_read;
reg in1_stream_read;
reg out_stream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    size_blk_n;
reg    out_stream_blk_n;
wire    ap_CS_fsm_state4;
reg   [31:0] size_read_reg_71;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_done;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_idle;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_ready;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_in1_stream_read;
wire   [31:0] grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_accum_out;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_accum_out_ap_vld;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_ext_blocking_n;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_str_blocking_n;
wire    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_int_blocking_n;
reg    grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start_reg = 1'b0;
end

krnl_vadd_compute_add_Pipeline_VITIS_LOOP_106_1 grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start),
    .ap_done(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_done),
    .ap_idle(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_idle),
    .ap_ready(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_ready),
    .in1_stream_dout(in1_stream_dout),
    .in1_stream_num_data_valid(2'd0),
    .in1_stream_fifo_cap(2'd0),
    .in1_stream_empty_n(in1_stream_empty_n),
    .in1_stream_read(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_in1_stream_read),
    .size_load(size_read_reg_71),
    .accum_out(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_accum_out),
    .accum_out_ap_vld(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_accum_out_ap_vld),
    .ap_ext_blocking_n(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_str_blocking_n),
    .ap_int_blocking_n(grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((out_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start_reg <= 1'b1;
        end else if ((grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_ready == 1'b1)) begin
            grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        size_read_reg_71 <= size_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in1_stream_read = grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_in1_stream_read;
    end else begin
        in1_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_stream_blk_n = out_stream_full_n;
    end else begin
        out_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_stream_write = 1'b1;
    end else begin
        out_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read = 1'b1;
    end else begin
        size_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((out_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = size_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start = grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_ap_start_reg;

assign out_stream_din = grp_compute_add_Pipeline_VITIS_LOOP_106_1_fu_53_accum_out;

endmodule //krnl_vadd_compute_add
